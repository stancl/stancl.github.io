<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Samuel Štancl</title>
    <link href="https://stancl.github.io" />
    <link type="application/atom+xml" rel="self" href="https://stancl.github.io/blog/feed.atom" />
    <updated>2019-07-07T14:21:37+02:00</updated>
    <id>https://stancl.github.io/blog/feed.atom</id>
    <author>
        <name>Samuel Štancl</name>
    </author>
                <entry>
    <id>https://stancl.github.io/blog/how-to-make-any-laravel-app-multi-tenant-in-5-minutes</id>
    <link type="text/html" rel="alternate" href="https://stancl.github.io/blog/how-to-make-any-laravel-app-multi-tenant-in-5-minutes" />
    <title>How to make any Laravel application multi-tenant in 5 minutes</title>
    <published>2019-06-29T02:00:00+02:00</published>
    <updated>2019-06-29T02:00:00+02:00</updated>
    <author>
        <name>Samuel Štancl</name>
    </author>
    <summary type="html">We will be implementing a multi-database tenancy package of mine, &lt;code&gt;stancl/tenancy&lt;/code&gt; into a simple Laravel blog example I found on GitHub.
The main feature of the package is that you don&#039;t have to make any changes to your app&#039;s code. After it......</summary>
    <content type="html"><![CDATA[
        <p>We will be implementing a multi-database tenancy package of mine, <a href="https://github.com/stancl/tenancy"><code>stancl/tenancy</code></a> into a <a href="https://github.com/milon/laravel-blog">simple Laravel blog example</a> I found on GitHub.</p>
<p>The main feature of the package is that you don't have to make any changes to your app's code. After it identifies the tenant using the hostname, it automatically configures database, Redis, cache and the filesystem for that tenant.</p>
<p>This tutorial explains the basics of making an app multi-tenant using this package. For a real-world production application, you should read the <a href="https://github.com/stancl/tenancy">documentation</a>. It's not long.</p>
<h3>Installing the tenancy package</h3>
<p>The package supports Laravel 5.7 and 5.8.</p>
<p>You will also need Redis. If your app uses Redis and you need to separate that data for tenants, use phpredis. If you don't need that, you can use predis.</p>
<pre><code>composer require stancl/tenancy</code></pre>
<h3>Adding middleware</h3>
<p>Open <code>app/Http/Kernel.php</code> and make the <code>Stancl\Tenancy\Middleware\InitializeTenancy</code> middleware top priority, to make sure everything is configured for tenancy before any code is run.</p>
<pre><code>protected $middlewarePriority = [
    \Stancl\Tenancy\Middleware\InitializeTenancy::class,
    // ...
];</code></pre>
<h3>Making the routes multi-tenant</h3>
<p>The package lets you have tenant routes in <code>routes/tenant.php</code> and shared routes in <code>routes/web.php</code>. When someone visits a tenant route, the <code>InitializeMiddleware</code> will configure everything for tenancy. If you have some content you don't want to apply tenany for, such as landing pages, sign up pages, etc, put those into <code>web.php</code>.</p>
<p>Since we don't have any shared content, we'll just rename <code>routes/web.php</code> to <code>routes/tenant.php</code> and create an empty <code>routes/web.php</code> file.</p>
<h3>Configuration</h3>
<p>First you need to publish the configuration file of the package. Run</p>
<pre><code>php artisan vendor:publish --provider='Stancl\Tenancy\TenancyServiceProvider' --tag=config</code></pre>
<p>and you should see something along the lines of <code>Copied File [...] to [/config/tenancy.php]</code>.</p>
<p>This lets us make changes to the configuration file of the tenancy package. I don't want to use MySQL for this simple repository, so I will change the DB driver for the application in <code>.env</code> and for the package in <code>config/tenancy.php</code>:</p>
<pre><code class="language-php">// .env
DB_CONNECTION=sqlite

// config/tenancy.php
'database' =&gt; [
    'based_on' =&gt; 'sqlite',
    // ...
],</code></pre>
<h4>Making changes to the config</h4>
<p>If you're using predis, disable Redis tenancy. Predis doesn't support prefixing.</p>
<pre><code class="language-php">// config/tenancy.php
'redis' =&gt; [
    'tenancy' =&gt; false,
    // ...
],</code></pre>
<h3>Creating a Redis connection</h3>
<p>By default, the package uses Redis as the &quot;central&quot; storage &mdash; for storing data about tenants. Redis is ideal for this thanks to its high performance. You don't really need to use a relational database for this.</p>
<p>Add this to <code>database.redis</code> config:</p>
<pre><code class="language-php">'tenancy' =&gt; [
    'host' =&gt; env('TENANCY_REDIS_HOST', '127.0.0.1'),
    'password' =&gt; env('TENANCY_REDIS_PASSWORD', null),
    'port' =&gt; env('TENANCY_REDIS_PORT', 6379),
    'database' =&gt; env('TENANCY_REDIS_DB', 3),
],</code></pre>
<p>Make sure you use a unique <code>database</code> number &mdash; Redis supports 16 databases which let you have multiple applications use the same Redis instance without any conflicts.</p>
<h3>Creating tenants</h3>
<p>We'll create two tenants to see that the data separation works correctly. We'll be using <code>php artisan tinker</code> to keep it simple. For your app, you should create a page that does this.</p>
<p>We'll use these two subdomains:</p>
<ul>
<li>tenant1.localhost</li>
<li>tenant2.localhost</li>
</ul>
<p>Anything under the <code>.localhost</code> TLD is automatically redirected to <code>127.0.0.1</code>, so we don't have to make any changes to <code>/etc/hosts</code>.</p>
<p>Open <code>php artisan tinker</code> and run these two functions:</p>
<pre><code class="language-php">&gt;&gt;&gt; tenant()-&gt;create('tenant1.localhost')
=&gt; [
     "uuid" =&gt; "e5611150-9a9e-11e9-8315-b9eb127de2b8",
     "domain" =&gt; "tenant1.localhost",
   ]
&gt;&gt;&gt; tenant()-&gt;create('tenant2.localhost')
=&gt; [
     "uuid" =&gt; "e8002ec0-9a9e-11e9-8095-51e64ce28359",
     "domain" =&gt; "tenant2.localhost",
   ]</code></pre>
<h3>Migrations</h3>
<p>We'll move all migrations from <code>database/migrations</code> to <code>database/migrations/tenant</code> so that we can run them for our tenants.</p>
<pre><code class="language-sh">touch database/migrations/tenant
mv database/migrations/*.php database/migrations/tenant</code></pre>
<p>Now we run <code>php artisan tenants:migrate</code>:</p>
<pre><code>php artisan tenants:migrate
Tenant: e8002ec0-9a9e-11e9-8095-51e64ce28359 (tenant2.localhost)
Migrating: 2014_10_12_000000_create_users_table
Migrated:  2014_10_12_000000_create_users_table
Migrating: 2014_10_12_100000_create_password_resets_table
Migrated:  2014_10_12_100000_create_password_resets_table
Migrating: 2017_03_04_131126_create_posts_table
Migrated:  2017_03_04_131126_create_posts_table
Migrating: 2017_03_04_131334_create_categories_table
Migrated:  2017_03_04_131334_create_categories_table
Migrating: 2017_03_04_131558_create_tags_table
Migrated:  2017_03_04_131558_create_tags_table
Migrating: 2017_03_04_131702_create_post_tag_table
Migrated:  2017_03_04_131702_create_post_tag_table
Migrating: 2017_03_04_131909_create_comments_table
Migrated:  2017_03_04_131909_create_comments_table
Migrating: 2017_03_04_133429_add_columns_to_user
Migrated:  2017_03_04_133429_add_columns_to_user
Tenant: e5611150-9a9e-11e9-8315-b9eb127de2b8 (tenant1.localhost)
Migrating: 2014_10_12_000000_create_users_table
Migrated:  2014_10_12_000000_create_users_table
Migrating: 2014_10_12_100000_create_password_resets_table
Migrated:  2014_10_12_100000_create_password_resets_table
Migrating: 2017_03_04_131126_create_posts_table
Migrated:  2017_03_04_131126_create_posts_table
Migrating: 2017_03_04_131334_create_categories_table
Migrated:  2017_03_04_131334_create_categories_table
Migrating: 2017_03_04_131558_create_tags_table
Migrated:  2017_03_04_131558_create_tags_table
Migrating: 2017_03_04_131702_create_post_tag_table
Migrated:  2017_03_04_131702_create_post_tag_table
Migrating: 2017_03_04_131909_create_comments_table
Migrated:  2017_03_04_131909_create_comments_table
Migrating: 2017_03_04_133429_add_columns_to_user
Migrated:  2017_03_04_133429_add_columns_to_user</code></pre>
<p><sub>Note: If you're using the same sample blog repository as I chose, you might have to tweak the <code>2017_03_04_133429_add_columns_to_user</code> migration (make the API key nullable). <strong>This is not an issue with the tenancy package but with the blog repository.</strong> I have submitted a PR so by the time you're reading this, this should no longer be an issue.</sub></p>
<h3>Seeding the database</h3>
<pre><code>php artisan tenants:seed --class DummyDataSeeder
Tenant: e8002ec0-9a9e-11e9-8095-51e64ce28359 (tenant2.localhost)
Database seeding completed successfully.
Tenant: e5611150-9a9e-11e9-8315-b9eb127de2b8 (tenant1.localhost)
Database seeding completed successfully.</code></pre>
<h3>Visiting the sites</h3>
<p>I didn't want to set up Apache or Nginx just for a simple demonstration, so I used:</p>
<pre><code>php artisan serve</code></pre>
<p>Now we can visit the sites. If we visit <code>tenant1.localhost:8000</code> and <code>tenant2.localhost:8000</code>, we can see two same applications, running from the same source code, but with different content.</p>
<h4>First blog</h4>
<p><img src="https://i.imgur.com/4r0eyIS.png" alt="First site" /></p>
<h4>Second blog</h4>
<p><img src="https://i.imgur.com/nP5aKxV.png" alt="Second site" /></p>
<h3>Closing</h3>
<p>My package makes it very easy to implement multi-tenancy into any Laravel application in a way that the application code doesn't have to be aware of any tenancy. The magic is automatically identifying tenants based on the subdomain when a route in the <code>routes/tenant.php</code> file is visited (those routes have the <code>InitializeTenancy</code> middleware <a href="https://github.com/stancl/tenancy/blob/97ec172fd43d90c0d380e25458386ed53e156005/src/TenantRouteServiceProvider.php#L14">applied on them</a>) and then accordingly switching the database and Redis connections and making some changes to the cache and filesystem.</p>
<p>If you're building a multi-tenant app, I highly recommend using this package. Implementing tenancy on your own can be painful, which is why I created this package &mdash; any Laravel application I make can be made multi-tenant in 5 minutes using this package.</p>
<p>Thanks for reading. If you have any questions or suggestions about the package, feel free to open Issues on the <a href="https://github.com/stancl/tenancy">GitHub page</a>.</p>    ]]></content>
</entry>
    </feed>
